% Installing pandoc

These instructions explain how to install pandoc from source.
Binary packages or ports of pandoc are available for freebsd
and several linux distributions, so check your package manager.
There is also a Windows installer.

Quick install
-------------

1.  Install the [Haskell platform].  This will give you [GHC] and
the [cabal-install] build tool.

2.  Use `cabal` to install pandoc and its dependencies:

        cabal install pandoc

    If you want support for source code syntax highlighting, set
    the `highlighting` flag:

        cabal install -fhighlighting pandoc

3.  Make sure the `$CABALDIR/bin` directory is in your path.  You should
now be able to run `pandoc`:

        pandoc --help

4.  Make sure the `$CABALDIR/share/man/man1` directory is in your `MANPATH`.
You should now be able to access the `pandoc` man page:

        man pandoc

[GHC]: http://www.haskell.org/ghc/
[Haskell platform]: http://hackage.haskell.org/platform/
[cabal-install]: http://hackage.haskell.org/trac/hackage/wiki/CabalInstall

Custom install
--------------

This is a step-by-step procedure that offers maximal control
over the build and installation.  Most users should use the
quick install, but this information may be of use to packagers.
For more details, see the [Cabal User's Guide].

1.  Install dependencies:  in addition to the [Haskell platform],
you will need [zip-archive] and (if you want syntax highlighting)
[highlighting-kate].

2.  Configure:

        runghc Setup.hs configure --prefix=DIR --bindir=DIR --libdir=DIR \
          --datadir=DIR --libsubdir=DIR --datasubdir=DIR --docdir=DIR \
          --htmldir=DIR --program-prefix=PREFIX --program-suffix=SUFFIX \
          --mandir=DIR --flags=FLAGSPEC

    All of the options have sensible defaults that can be overridden
    as needed.

    `FLAGSPEC` is a list of Cabal configuration flags, optionally
    preceded by a `-` (to force the flag to `false`), and separated
    by spaces.  Pandoc's flags include:

    - `library`:  build the library (default yes)
    - `executable`: build the pandoc executable (default yes)
    - `wrappers`: build the wrappers `markdown2pdf` and `hsmarkdown`
      (default yes)
    - `highlighting`: compile with syntax highlighting support (increases
      the size of the executable) (default no)

    So, for example,

        --flags="-library highlighting"

    tells Cabal to build the executable but not the library, and to
    compile with syntax highlighting support.

3.  Build:

        runghc Setup.hs build

4.  Build API documentation:

        runghc Setup.hs haddock --html-location=URL --hyperlink-source

5.  Copy the files:

        runghc Setup.hs copy --destdir=PATH

    The default destdir is `/`.

6.  Register pandoc as a GHC package:

        runghc Setup.hs register

    Package managers may want to use the `--gen-script` option to
    generate a script that can be run to register the package at
    install time.

[zip-archive]: http://hackage.haskell.org/package/zip-archive
[highlighting-kate]: http://hackage.haskell.org/package/highlighting-kate
[Cabal User's Guide]: http://www.haskell.org/cabal/release/latest/doc/users-guide/builders.html#setup-configure-paths

Optional citeproc support
-------------------------

Pandoc can optionally be compiled with support for bibliographic citations
using Andrea Rossato's [`citeproc-hs` library].  This allows you
to specify citations in markdown using an intuitive syntax (for example,
`[jones2005@p. 3; smith2006]`). These are automatically changed into
appropriately styled citations in the output, and a bibliography is
added.  The bibliography data and style information are taken from XML
files that must be specified on the command line. (Note:  `citeproc-hs`
support is experimental, and the interface may change in the future.)

If you are using Cabal to compile pandoc, specify the `citeproc` flag in
the configure step:

    runhaskell Setup configure --flags="citeproc"

[`citeproc-hs` library]: http://code.haskell.org/citeproc-hs/

